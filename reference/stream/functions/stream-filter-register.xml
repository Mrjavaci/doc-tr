<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 0c9c2dd669fe9395eaa73d487fbd160f9057429a Maintainer: nilgun Status: ready -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>Kullanıcı tanımlı bir akım süzgecini etkin kılar</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>süzgeç</parameter></methodparam>
   <methodparam><type>string</type><parameter>sınıf</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> işlevi dosya sistemi
   işlevleriyle (<function>fopen</function>, <function>fread</function> gibi)
   kullanılmak üzere kendi süzgecinizi tanımlamanıza izin verir.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>süzgeç</parameter></term>
     <listitem>
      <para>
       Süzgecin ismi.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>sınıf</parameter></term>
     <listitem>
      <para>
       Bir süzgeci gerçeklemek için, <classname>php_user_filter</classname>'a
       bir eklenti olarak, üye işlevlerle bir sınıf
       tanımlamanız gerekir. Süzgecinizin ekli olduğu akım üzerinde okuma ve
       yazma işlemleri yaparken, PHP tüm veriyi süzgecinizden (ve akıma ekli
       diğer süzgeçlerden) geçirerek verinin istendiği gibi değiştirilmesini
       sağlar. Yöntemleri tamamen <classname>php_user_filter</classname>
       sınıfında açıklandığı gibi gerçeklemeniz gerekir. -- Başka türlü
       yaparsanız süzgecin ne yapacağı belli olmaz.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <parameter>süzgeç</parameter> zaten tanımlı bir süzgeçse &false; döner.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <filename>foo-bar.txt</filename> akımında büyük harfe dönüşüm
    süzgeci</title>
    <para>
     Aşağıdaki örnekte, <filename>foo-bar.txt</filename> akımında okunup
     yazılan tüm harfleri büyük harfe çeviren <literal>strtoupper</literal>
     isimli bir süzgeç gerçeklenmektedir.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Kendi süzgecimizi tanımlayalım */
class strtoupper_filter extends php_user_filter {
  function filter($giriş, $çıkış, &$tüketilen, $kapanış)
  {
    while ($bakla = stream_bucket_make_writeable($giriş)) {
      $bakla->data = strtoupper($bakla->data);
      $tüketilen += $bakla->datalen;
      stream_bucket_append($çıkış, $bakla);
    }
    return PSFS_PASS_ON;
  }
}

/* Süzgecimizi PHP'ye tanıtalım */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Süzgecin tanıtımı başarısız oldu");

$fp = fopen("foo-bar.txt", "w");

/* Süzgeci açık akıma ekleyelim  */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* İçeriği tekrar okuyalım */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- Çok sayıda süzgeç ismiyle eşleşen soysal bir süzgeç sınıfının
    tanıtımı</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Kendi süzgeç sınıfımızı tanımlayalım */
class string_filter extends php_user_filter {
  var $mode;

  function filter($giriş, $çıkış, &$tüketilen, $kapanış)
  {
    while ($bakla = stream_bucket_make_writeable($giriş)) {
      if ($this->mode == 1) {
        $bakla->data = strtoupper($bakla->data);
      } elseif ($this->mode == 0) {
        $bakla->data = strtolower($bakla->data);
      }

      $tüketilen += $bakla->datalen;
      stream_bucket_append($çıkış, $bakla);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* PHP'nin başka str.* süzgeçlerine bakması için
         başarısızlığı raporluyoruz */
      return false;
    }

    return true;
  }
}

/*Süzgecimizi PHP'ye tanıtalım */
stream_filter_register("str.*", "string_filter")
    or die("Süzgeç tanıtılamadı");

$fp = fopen("foo-bar.txt", "w");

/* Süzgeci açık akıma ekleyelim.
   Burada str.tolower süzgecini de ekleyebilirdik. */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Line1\n");
fwrite($fp, "Word - 2\n");
fwrite($fp, "Easy As 123\n");

fclose($fp);

/* İçeriği tekrar okuyalım */
readfile("foo-bar.txt");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
LINE1
WORD - 2
EASY AS 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
