<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: c0575c87fbc508205c885277db704b583abe9b17 Maintainer: nilgun Status: ready -->
<refentry xml:id="reflectionproperty.setvalue" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>ReflectionProperty::setValue</refname>
  <refpurpose>Özelliğe değer atar</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>ReflectionProperty::setValue</methodname>
   <methodparam><type>object</type><parameter>nesne</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>değer</parameter></methodparam>
  </methodsynopsis>
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>ReflectionProperty::setValue</methodname>
   <methodparam><type>mixed</type><parameter>değer</parameter></methodparam>
  </methodsynopsis>
  <para>
   Bir özelliğe değer atar.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>nesne</parameter></term>
     <listitem>
      <para>
       Özellik statik değilse özelliğin ait olduğu nesne burada belirtilmelidir. Statik ise nesne belirtmeye gerek yoktur.
       Sadece <parameter>değer</parameter> belirtmek yeterlidir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>değer</parameter></term>
     <listitem>
      <para>
       Yeni değer.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Özellik erişilebilir değilse <classname>ReflectionException</classname>
   yavrulanır. Protected veya private bir özelliği erişilebilir kılmak için
   <methodname>ReflectionProperty::setAccessible</methodname> kullanılmalıdır.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <methodname>ReflectionProperty::setValue</methodname> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static $staticProperty;

    public $property;
    protected $privateProperty;
}

$reflectionClass = new ReflectionClass('Foo');

$reflectionClass->getProperty('staticProperty')->setValue('foo');
var_dump(Foo::$staticProperty);

$foo = new Foo;

$reflectionClass->getProperty('property')->setValue($foo, 'bar');
var_dump($foo->property);

$reflectionProperty = $reflectionClass->getProperty('privateProperty');
$reflectionProperty->setAccessible(true);
$reflectionProperty->setValue($foo, 'foobar');
var_dump($reflectionProperty->getValue($foo));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(3) "foo"
string(3) "bar"
string(6) "foobar"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>ReflectionProperty::getValue</methodname></member>
   <member><methodname>ReflectionProperty::setAccessible</methodname></member>
   <member><methodname>ReflectionClass::setStaticPropertyValue</methodname></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
