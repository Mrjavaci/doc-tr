<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 82c84a325ea8d03f45669988e4f6ed53221ebd8f Maintainer: nilgun Status: ready -->
<refentry xml:id="function.token-get-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>token_get_all</refname>
  <refpurpose>Belirtilen kaynağı PHP dizgeciklerine ayırır</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>token_get_all</methodname>
   <methodparam><type>string</type><parameter>kod</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>seçenekler</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   Belirtilen <parameter>kod</parameter> dizgesi, Zend motorunun
   sözdizimsel tarayıcısı kullanılarak PHP dil dizgeciklerine çözümlenir.
  </para>
  <para>
   Dizgeciklerin listesi için <xref linkend="tokens" /> sayfasına bakınız
   veya bir dizgecik değerini dizgesel gösterimine dönüştürmek için
   <function>token_name</function> işlevini kullanınız.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>kod</parameter></term>
     <listitem>
      <para>
       Çözümlenecek PHP kaynak kodu.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>seçenekler</parameter></term>
     <listitem>
      <para>
       Geçerli seçenekler:
       <itemizedlist>
        <listitem>
         <simpara>
          <constant>TOKEN_PARSE</constant> - Belirli bağlamlarda dahili
          kullanıma ayrılmış sözcükleri kullanma yeteneğini onaylar.
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Dizgecik betimleyicilerinden oluşan bir dizi. Her dizgecik betimleyicisi
   ya tek bir karakterden (<literal>;</literal>, <literal>.</literal>,
   <literal>&gt;</literal>, <literal>!</literal> gibi) oluşur ya da üç
   elemanlı bir diziden; 0. elemanda dizgecik indisi, 1. elemanda özgün
   dizgeciğin dizgesel içeriği ve 2. elemanda satır numarası bulunur.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>- <function>token_get_all</function> örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('<?php echo; ?>');

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo "Line {$token[2]}: ", token_name($token[0]), " ('{$token[1]}')", PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Line 1: T_OPEN_TAG ('<?php ')
Line 1: T_ECHO ('echo')
Line 1: T_WHITESPACE (' ')
Line 1: T_CLOSE_TAG ('?>')
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>- <function>token_get_all</function> yanlış kullanım örneği</title>
    <programlisting role="php">
<![CDATA[
<?php
$tokens = token_get_all('/* comment */');

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo "Line {$token[2]}: ", token_name($token[0]), " ('{$token[1]}')", PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Line 1: T_INLINE_HTML ('/* comment */')
]]>
    </screen>
   </example>
   Yukarıdaki örnekte dizge beklendiği gibi <constant>T_COMMENT</constant>
   ile değil <constant>T_INLINE_HTML</constant> ile çözümlenmiştir.Bunun
   sebebi sağlanan kodda hiç başlangıç etiketi bulunmamasıdır. Bu, normal
   bir dosyada PHP etiketlerinin dışına bir açıklama koymaya eşdeğerdir.
  </para>
  <para>
   <example>
    <title>-
     Dahili kullanıma ayrılmış sözcük kullanan sınıf üzerinde
     <function>token_get_all</function>
    </title>
    <programlisting role="php">
<![CDATA[
<?php
$source = <<<'code'
<?php

class A
{
    const PUBLIC = 1;
}
code;

$tokens = token_get_all($source, TOKEN_PARSE);

foreach ($tokens as $token) {
    if (is_array($token)) {
        echo token_name($token[0]) , PHP_EOL;
    }
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
T_OPEN_TAG
T_WHITESPACE
T_CLASS
T_WHITESPACE
T_STRING
T_CONST
T_WHITESPACE
T_STRING
T_LNUMBER
]]>
    </screen>
   </example>
   <constant>TOKEN_PARSE</constant> olmaksızın, sondan bir önceki
   simgeleştirici (<constant>T_STRING</constant>)
   <constant>T_PUBLIC</constant> olurdu.
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>PhpToken::tokenize</function></member>
   <member><function>token_name</function></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
